[{"id":0,"href":"/using-homechart/android/","title":"Android","section":"Using Homechart","content":"Android #  To get started with Homechart on Android, get the app on the Play Store.\nConnecting to Self-Hosted Instances #  To use Homechart with your self-hosted instance, tick the \u0026ldquo;Self-Hosted Server\u0026rdquo; button on the Sign In or Sign Up page. Fill in the address of your self-hosted instance (e.g. https://web.homechart.app).\n"},{"id":1,"href":"/getting-started/in-the-cloud/","title":"In The Cloud (Hosted)","section":"Getting Started","content":"Getting Started With Homechart #  To get started with Homechart in the cloud, visit https://web.homechart.app/signup and signup for a new account.\n"},{"id":2,"href":"/getting-started/on-your-network/","title":"On Your Network (Self-Hosted)","section":"Getting Started","content":"Homechart On Your Network (Self Hosted) #  To get started with Homechart on your network, choose an installation method:\n  Using a binary, and run it with a service manager like systemd  Using a container, and run it with a container runtime like Docker  "},{"id":3,"href":"/getting-started/on-your-network/installation/requirements/","title":"Requirements","section":"Installation","content":"Requirements #  1. Server #  The server component of Homechart is written in Go and has very low resource requirements:\n 1 CPU 512MB RAM  2. Database #  Homechart requires a full access to a PostgreSQL 14 database. Older versions may work, but they are not tested.\nYou can create a database for Homechart on an existing PostgreSQL server with these commands, replacing the database name, username and password:\nCREATE DATABASE homechart; CREATE ROLE \u0026#34;homechart\u0026#34; WITH CREATEDB LOGIN PASSWORD \u0026#39;homechart\u0026#39;; REVOKE ALL PRIVILEGES ON SCHEMA public FROM public; GRANT ALL PRIVILEGES ON DATABASE homechart TO \u0026#34;homechart\u0026#34;; GRANT ALL PRIVILEGES ON SCHEMA public TO \u0026#34;homechart\u0026#34;; "},{"id":4,"href":"/getting-started/on-your-network/installation/binary-install/","title":"Binary Install","section":"Installation","content":"Binary Install #  Homechart can be deployed as a standalone binary on Linux (amd64 and arm) from our releases website.\n1. Review the requirements #  Ensure your system meets the Server Requirements.\n2. Download Homechart #  Visit https://releases.homechart.app/ and download the version of Homechart for your platform. Optionally, you can verify your download by comparing the SHA-512 sum:\nsha256sum -c homechart_latest_linux_amd64.gz.sha256 Once your download has completed, decompress it:\ngzip -d sha256sum -c homechart_latest_linux_arm.gz.sha256 3. Run Homechart #  The Homechart executable can be ran from any directory and stores no files locally. You will need to provide some configuration settings via environment variables or a JSON configuration file, see Configuration Options.\n./homechart #  A minimal command line for Homechart:\n$ ./homechart -c config.json serve systemd #  A base homechart.service file:\n[Unit] Description=Homechart - Your Handy Home Assistant Documentation=https://docs.homechart.app After=network.target [Service] Type=simple User=homechart Group=homechart ExecStart=/usr/bin/homechart -c /etc/homechart.json serve Restart=always RestartSec=1s [Install] WantedBy=multi-user.target "},{"id":5,"href":"/getting-started/on-your-network/installation/container-install/","title":"Container Install","section":"Installation","content":"Container Install #  Homechart can be deployed as a container on Linux (amd64 and arm) from our images hosted on DockerHub.\n1. Review the requirements #  Ensure your system meets the Server Requirements.\n2. Install a container runtime #  Homechart can run on any OCI compatible runtime on Linux amd64 and arm64. Most users use Docker and Docker Compose.\n3. Run Homechart #  The Homechart container is configured to start Homechart server without having to specify a command or entrypoint. You will need to provide some configuration settings via environment variables, see Configuration Options.\ndocker run #  A minimal docker run for Homechart:\ndocker run -e HOMECHART_POSTGRESQL_HOSTNAME=homechart -e HOMECHART_POSTGRESQL_PASSWORD=homechart -e HOMECHART_POSTGRESQL_USERNAME=homechart -p 3000:3000 -d candiddev/homechart docker-compose.yml #  A base docker-compose.yml file:\nversion: \u0026#34;3\u0026#34; services: homechart: depends_on: - postgres environment: HOMECHART_POSTGRESQL_HOSTNAME: postgres HOMECHART_POSTGRESQL_PASSWORD: postgres HOMECHART_POSTGRESQL_USERNAME: postgres image: candiddev/homechart:latest ports: - \u0026#34;3000:3000\u0026#34; restart: always postgres: environment: POSTGRES_PASSWORD: postgres image: postgres:14 restart: always volumes: - postgres:/var/lib/postgresql/data volumes: postgres: {} "},{"id":6,"href":"/using-homechart/ios/","title":"iOS","section":"Using Homechart","content":"iOS #  To get started with Homechart on iOS, get the app on the App Store.\nConnecting to Self-Hosted Instances #  To use Homechart with your self-hosted instance, tick the \u0026ldquo;Self-Hosted Server\u0026rdquo; button on the Sign In or Sign Up page. Fill in the address of your self-hosted instance (e.g. https://web.homechart.app).\n"},{"id":7,"href":"/communities/","title":"Communities","section":"Welcome","content":"Communities #    Discord  GitHub  Reddit  "},{"id":8,"href":"/getting-help/community-support/","title":"Community Support","section":"Getting Help","content":"Community Support #   Homechart communities are available to help with common issues encountered with self-hosting and advice for using Homechart on different devices.\n"},{"id":9,"href":"/getting-help/paid-support/","title":"Paid Support","section":"Getting Help","content":"Paid Support #  After setting up your Homechart subscription, you can use the Contact Us options in the menu to submit support and feature requests.\n"},{"id":10,"href":"/getting-started/on-your-network/installation/configuration-options/","title":"Configuration Options","section":"Installation","content":"Configuration Options #  Homechart can be configured using environment variables or a JSON configuration file. The configuration is divided into sections:\n App PostgreSQL SMTP Vault  For environment variables, every configuration key can be set using HOMECHART_\u0026lt;SECTION\u0026gt;_\u0026lt;KEY\u0026gt;=a value, i.e. HOMECHART_APP_DEBUG=true\nFor a JSON configuration file, the keys are camelCase and nested under each section:\n{ \u0026#34;app\u0026#34;: { \u0026#34;debug\u0026#34;: true } } Configuration values can be booleans (true/false), integers (1/2/3), lists (1,2,3/a,b,c), and strings (a/b/c).\nHomechart can also read configuration files from HashiCorp Vault. See Vault.\napp #  adminEmailAddresses (recommended) #  List of email addresses which will have admin access to Homechart for their account.\nType: List Default: [] Environment Variable: HOMECHART_APP_ADMINEMAILADDRESSES JSON: {\u0026#34;app\u0026#34;: {\u0026#34;adminEmailAddresses\u0026#34;: []}} baseURL (recommended) #  Base URL for Homechart, mostly used by notifications.\nType: string Default: \u0026#34;https://web.homechart.app\u0026#34; Environment Variable: HOMECHART_APP_BASEURL JSON: {\u0026#34;app\u0026#34;: {\u0026#34;baseURL\u0026#34;: \u0026#34;https://web.homechart.app\u0026#34;}} cacheTTLMinutes #  Number of minutes to keep entries in cache.\nType: integer Default: 15 Environment Variable: HOMECHART_APP_CACHETTLMINUTES JSON: {\u0026#34;app\u0026#34;: {\u0026#34;cacheTTLMinutes\u0026#34;: 15}} debug #  Enable debug logging.\nType: boolean Default: false Environment Variable: HOMECHART_APP_DEBUG JSON: {\u0026#34;app\u0026#34;: {\u0026#34;debug\u0026#34;: false}} demo #  Allow users to create demo logins, mostly used by web.homechart.app. Easy way to try out Homechart.\nType: boolean Default: false Environment Variable: HOMECHART_APP_DEMO JSON: {\u0026#34;app\u0026#34;: {\u0026#34;demo\u0026#34;: false}} disableTasks #  Disable any background tasks (sending notifications, cleaning up old data) from running on this instance.\nType: boolean Default: false Environment Variable: HOMECHART_APP_DISABLETASKS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;disableTasks\u0026#34;: false}} keepCalendarEventDays #  Number of days to retain Calendar Events after their end date.\nType: integer Default: 90 Environment Variable: HOMECHART_APP_KEEPCALENDAREVENTDAYS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;keepCalendarEventDays\u0026#34;: 90}} keepCookMealPlanDays #  Number of days to retain Cook Meal Plans after their scheduled date.\nType: integer Default: 90 Environment Variable: HOMECHART_APP_KEEPCOOKMEALPLANDAYS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;keepCookMealPlanDays\u0026#34;: 90}} keepDeletedDays #  Number of days to keep deleted data (Notes, Recipes).\nType: integer Default: 30 Environment Variable: HOMECHART_APP_KEEPDELETEDDAYS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;keepDeletedDays\u0026#34;: 30}} keepHealthLogDays #  Number of days to retain Health Logs.\nType: integer Default: 90 Environment Variable: HOMECHART_APP_KEEPHEALTHLOGDAYS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;keepHealthLogDays\u0026#34;: 90}} keepNotesPageVersions #  Number of Notes Page Versions to keep.\nType: integer Default: 10 Environment Variable: HOMECHART_APP_KEEPNOTESPAGEVERSIONS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;keepNotesPageVersions\u0026#34;: 10}} keepPlanTasksDays #  Number of days to keep completed tasks.\nType: integer Default: 90 Environment Variable: HOMECHART_APP_KEEPPLANTASKSDAYS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;keepPlanTasksDays\u0026#34;: 90}} motd #  Informational message to display on the UI for all users.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_APP_MOTD JSON: {\u0026#34;app\u0026#34;: {\u0026#34;motd\u0026#34;: \u0026#34;\u0026#34;}} noEmailDomains #  List of domains that will not be verified. Use this to automatically activate accounts for each domain listed.\nType: list Default: [] Environment Variable: HOMECHART_APP_NOEMAILDOMAINS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;noEmailDomains\u0026#34;: []}} port #  Listening port for Homechart. Setup port forwarding to this port.\nType: integer Default: 3000 Environment Variable: HOMECHART_APP_PORT JSON: {\u0026#34;app\u0026#34;: {\u0026#34;port\u0026#34;: 3000}} proxyAddress #  Upstream IPv4 or IPv6 address of a trusted proxy. See SSO documentation for usage details.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_APP_PROXYADDRESS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;proxyAddress\u0026#34;: \u0026#34;\u0026#34;}} proxyHeaderEmail #  Proxy header that should be associated with an account email address. See SSO documentation for usage details.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_APP_PROXYHEADEREMAIL JSON: {\u0026#34;app\u0026#34;: {\u0026#34;proxyHeaderEmail\u0026#34;: \u0026#34;\u0026#34;}} proxyHeaderName #  Proxy header that should be associated with an account name. See SSO documentation for usage details.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_APP_PROXYHEADERNAME JSON: {\u0026#34;app\u0026#34;: {\u0026#34;proxyHeaderName\u0026#34;: \u0026#34;\u0026#34;}} rateLimiterRate #  Maximum number of requests over a specific time to public endpoints. Prevents brute force attacks. Takes the format of (number-H/M/S) where H=hour, M=minute, S=Second. The default, 15-H, means 15 requests per hour.\nType: string Default: \u0026#34;15-H\u0026#34; Environment Variable: HOMECHART_APP_RATELIMITERRATE JSON: {\u0026#34;app\u0026#34;: {\u0026#34;rateLimiterRate\u0026#34;: \u0026#34;15-H\u0026#34;}} rollupBudgetTransactionsBalanceMonths #  Number of months before a Budget Transaction is rolled up into a starting balance.\nType: integer Default: 48 Environment Variable: HOMECHART_APP_ROLLUPBUDGETTRANSACTIONSBALANCEMONTHS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;rollupBudgetTransactionsBalanceMonths\u0026#34;: 48}} rollupBudgetTransactionsSummaryMonths #  Number of months before a Budget Transaction is rolled up into monthly summaries.\nType: integer Default: 12 Environment Variable: HOMECHART_APP_ROLLUPBUDGETTRANSACTIONSSUMMARYMONTHS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;rollupBudgetTransactionsSummaryMonths\u0026#34;: 12}} sessionExpirationDefaultSeconds #  Time between non-Remember Me sessions expiring, in seconds.\nType: integer Default: 3600 Environment Variable: HOMECHART_APP_SESSIONEXPIRATIONDEFAULTSECONDS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;sessionExpirationDefaultSeconds\u0026#34;: 3600}} sessionExpirationRememberSeconds #  Time between Remember Me sessions expiring, in seconds.\nType: integer Default: 7776000 Environment Variable: HOMECHART_APP_SESSIONEXPIRATIONREMEMBERSECONDS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;sessionExpirationRememberSeconds\u0026#34;: 7776000}} signupDisabled #  Disables new account signups. Accounts can still be created/invited under the Admin \u0026gt; Household page and Settings \u0026gt; Household. Self-hosted instances should enable this after they have setup their household.\nType: boolean Default: false Environment Variable: HOMECHART_APP_SIGNUPDISABLED JSON: {\u0026#34;app\u0026#34;: {\u0026#34;signupDisabled\u0026#34;: false}} tlsCertificate #  Path to a SSL/TLS certificate file. Should work for the domain in your baseURL. If set, along with tlsKey, Homechart will listen for HTTPS connections only.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_APP_TLSCERTIFICATE JSON: {\u0026#34;app\u0026#34;: {\u0026#34;tlsCertificate\u0026#34;: \u0026#34;\u0026#34;}} tlsKey #  Path to a SSL/TLS private key file. Should work for the domain in your baseURL. If set, along with tlsCertificate), Homechart will listen for HTTPS connections only.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_APP_TLSKEY JSON: {\u0026#34;app\u0026#34;: {\u0026#34;tlsKey\u0026#34;: \u0026#34;\u0026#34;}} postgresql #  database (required) #  Database to use when connecting to PostgreSQL.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_POSTGRESQL_DATABASE JSON: {\u0026#34;postgresql\u0026#34;: {\u0026#34;database\u0026#34;: \u0026#34;\u0026#34;}} hostname (required) #  Hostname to use when connecting to PostgreSQL.\nType: string Default: \u0026#34;localhost\u0026#34; Environment Variable: HOMECHART_POSTGRESQL_HOSTNAME JSON: {\u0026#34;postgresql\u0026#34;: {\u0026#34;hostname\u0026#34;: \u0026#34;localhost\u0026#34;}} maxConnections #  Maximum number of open connections to PostgreSQL.\nType: integer Default: 25 Environment Variable: HOMECHART_POSTGRESQL_MAXCONNECTIONS JSON: {\u0026#34;postgresql\u0026#34;: {\u0026#34;maxConnections\u0026#34;: 25}} maxIdleConnections #  Maximum number of idle connections to PostgreSQL.\nType: integer Default: 5 Environment Variable: HOMECHART_POSTGRESQL_MAXIDLECONNECTIONS JSON: {\u0026#34;postgresql\u0026#34;: {\u0026#34;maxIdleConnections\u0026#34;: 5}} maxLifetimeMinutes #  Maximum number of minutes to keep a connection to PostgreSQL open.\nType: integer Default: 5 Environment Variable: HOMECHART_POSTGRESQL_MAXLIFETIMEMINUTES JSON: {\u0026#34;postgresql\u0026#34;: {\u0026#34;maxLifetimeMinutes\u0026#34;: 5}} password (required) #  Password to use when connecting to PostgreSQL.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_POSTGRESQL_PASSWORD JSON: {\u0026#34;postgresql\u0026#34;: {\u0026#34;password\u0026#34;: \u0026#34;\u0026#34;}} port #  TCP port to use when connecting to PostgreSQL.\nType: integer Default: 5432 Environment Variable: HOMECHART_POSTGRESQL_PORT JSON: {\u0026#34;postgresql\u0026#34;: {\u0026#34;port\u0026#34;: 5432}} sslMode #  PostgreSQL SSL/TLS enforcement level.\nType: string Default: \u0026#34;disable\u0026#34; Environment Variable: HOMECHART_POSTGRESQL_SSLMODE JSON: {\u0026#34;postgresql\u0026#34;: {\u0026#34;sslMode\u0026#34;: \u0026#34;disable\u0026#34;}} username (required) #  Username to use when connecting to PostgreSQL.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_POSTGRESQL_USERNAME JSON: {\u0026#34;postgresql\u0026#34;: {\u0026#34;username\u0026#34;: \u0026#34;\u0026#34;}} smtp #  Homechart can use a SMTP server to send notifications to your household members.\nemailAddress #  Email address to send from.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_SMTP_EMAILADDRESS JSON: {\u0026#34;smtp\u0026#34;: {\u0026#34;emailAddress\u0026#34;: \u0026#34;\u0026#34;}} hostname #  Hostname to use when connecting to SMTP server.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_SMTP_HOSTNAME JSON: {\u0026#34;smtp\u0026#34;: {\u0026#34;hostname\u0026#34;: \u0026#34;\u0026#34;}} replyTo #  Email address to have users send to when replying.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_SMTP_REPLYTO JSON: {\u0026#34;smtp\u0026#34;: {\u0026#34;replyTo\u0026#34;: \u0026#34;\u0026#34;}} port #  TCP port to use when connecting to SMTP server.\nType: integer Default: 587 Environment Variable: HOMECHART_SMTP_PORT JSON: {\u0026#34;smtp\u0026#34;: {\u0026#34;port\u0026#34;: 587}} password #  Password to use when connecting to SMTP server.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_SMTP_PASSWORD JSON: {\u0026#34;smtp\u0026#34;: {\u0026#34;password\u0026#34;: \u0026#34;\u0026#34;}} username #  Username to use when connecting to SMTP server.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_SMTP_USERNAME JSON: {\u0026#34;smtp\u0026#34;: {\u0026#34;username\u0026#34;: \u0026#34;\u0026#34;}} vault #  Homechart can use HashiCorp Vault to retrieve configuration values. Homechart will look for specified kv secrets and read config values from fields within them. The fields must have the format:\n \u0026lt;section\u0026gt;.\u0026lt;key\u0026gt; app.disabletasks  The field name must be lowercase. In theory, you can specify every config in Vault except the Vault stanza, Homechart needs to know where to get the Vault config from.\naddress #  Address of the HashiCorp Vault instance to use for secrets, also checks the VAULT_ADDR environment variable.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_VAULT_ADDRESS JSON: {\u0026#34;vault\u0026#34;: {\u0026#34;address\u0026#34;: \u0026#34;\u0026#34;}} kvPaths #  List of HashiCorp Vault kv2 paths to fetch config values from. Secrets must have lowercase fields like postgresql.database or smtp.username. Paths will overwrite values from previous paths, so the order is important.\nType: list Default: [] Environment Variable: HOMECHART_VAULT_KVPATHS JSON: {\u0026#34;vault\u0026#34;: {\u0026#34;kvPaths\u0026#34;: []}} token #  HashiCorp Vault token to use for secrets, also checks VAULT_TOKEN.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_VAULT_TOKEN JSON: {\u0026#34;vault\u0026#34;: {\u0026#34;token\u0026#34;: \u0026#34;\u0026#34;}} "},{"id":11,"href":"/getting-started/on-your-network/operations/backups/","title":"Backups","section":"Operations","content":"Backups #  Please remember to backup your data! Self hosted Homechart is easy to backup: all persistent data is stored in PostgreSQL, Homechart doesn\u0026rsquo;t save anything locally. You can use tools like pg_dump or wal-g to perform the backup.\nAdditionally, you can have your self-hosted instance perform automated, encrypted backups to Homechart Cloud. Visit /subscription on your self-hosted instance to enable this.\n"},{"id":12,"href":"/getting-started/on-your-network/operations/updates/","title":"Updates","section":"Operations","content":"Updates #  Homechart is easily updated by replacing the container or executable with a newer version.\nBinary Updates #  To update your Homechart binary, download a new copy of homechart_latest. You can compare the SHA-512 sum of your existing executable to see if you need to update.\nContainer Updates #  To update your Homechart container, pull the latest container, e.g.:\ndocker pull candiddev/homechart:latest\nDepending on how you\u0026rsquo;re running Homechart, you may need to remove the existing Homechart container or re-run docker-compose up\n"},{"id":13,"href":"/using-homechart/web/","title":"Web","section":"Using Homechart","content":"Web #  Homechart can be used by any web browser. Visit https://web.homechart.app or your self-hosted URL to get started. On compatible devices, Homechart will prompt you to install it\u0026ndash;this will install Homechart as if it is a native app.\n"},{"id":14,"href":"/getting-started/on-your-network/operations/sso/","title":"Single Sign-On (SSO)","section":"Operations","content":"Single Sign-On (SSO) #  For self-hosted users, Homechart can integrate with your existing authentication system to allow your household members to authenticate with it or even sign in automatically. Some things to note:\n The account will be created if the email address does not exist in Homechart already. You should pre-create your household members using the email address that the SSO will pass through, otherwise they will be created under a separate household. If the account already exists in Homechart, Homechart will create a new session for the account associated with the email address that the SSO passes. Please ensure you have properly configured your SSO implementation to avoid malicious users from setting the proxy headers and gaining access to your instance. At a minimum, you must have the appropriate configuration values set for HOMECHART_APP_PROXYADDRESS and HOMECHART_APP_PROXYHEADEREMAIL to enable SSO.  Examples #  Traefik + Authelia + Homechart #  In this example, Traefik sits in front of Homechart and proxies request to it. Authelia is installed and configured for authentication within Traefik. Traefik will check with Authelia to see if the traffic is allowed, and then pass the proxy headers to Homechart. Homechart is configured to look for these proxy headers (Remote-Name, Remote-Email) and source address of Traefik.\nIn this contrived example, Authelia is configured with a local database of users. On your network, you would configure Authelia to use your authentication source, such as LDAP/Active Directory.\nTraefik Dynamic Config (traefik-dynamic.yaml) #  http: middlewares: authelia: forwardauth: address: http://localhost:9091/api/verify?rd=https://auth.example.com:8443 authResponseHeaders: - Remote-Name - Remote-Email trustForwardHeader: true routers: authelia: service: authelia rule: \u0026#34;Host(`auth.example.com`)\u0026#34; tls: true homechart: middlewares: - authelia service: homechart rule: \u0026#34;Host(`homechart.example.com`)\u0026#34; tls: true services: authelia: loadBalancer: servers: - url: http://localhost:9091 homechart: loadBalancer: servers: - url: http://localhost:3000 Traefik Command Line #  ./traefik --entrypoints.https=true --entrypoints.https.address=:8443 --providers.file.filename=traefik-dynamic.yaml Authelia Config (authelia.yaml) #  server: host: 0.0.0.0 port: 9091 log: level: debug jwt_secret: C57E160E9CE711D214BF4CCF407DE6C64FCF19A7C20E7C6D7C2FF18826A7E1AA default_redirection_url: https://auth.example.com:8443 authentication_backend: file: path: ./users.yaml password: algorithm: argon2id iterations: 1 salt_length: 16 parallelism: 8 memory: 1024 # blocks this much of the RAM. Tune this. access_control: default_policy: one_factor session: name: authelia_session domain: example.com storage: encryption_key: superdupersecretsecret local: path: ./db.sqlite3 notifier: filesystem: filename: ./notification.txt Authelia User Config (users.yaml) #  users: jane@example.com: displayname: \u0026#34;Jane Doe\u0026#34; password: $argon2id$v=19$m=65536,t=1,p=8$Z2JJSk9qbVlXVk9VWUtQMw$2VqsXXhvTfiHxxvmDUj8GpzPCktmMxdLR2rojFxxknc email: jane@example.com groups: - dev john@example.com: displayname: \u0026#34;John Doe\u0026#34; password: \u0026#34;$argon2id$v=19$m=65536,t=1,p=8$MlplVVhMbzNmcXJmaVVsaA$ydwPNQ5wW3Lu1XuPWhQW7dzlNGP3ynexmzlQmyVMaIY\u0026#34; email: john@example.com groups: - dev Authelia Command Line #  ./authelia-linux-amd64 --config authelia.yaml Homechart Command Line #  HOMECHART_APP_PROXYADDRESS=[::1] HOMECHART_APP_PROXYHEADEREMAIL=Remote-Email HOMECHART_APP_PROXYHEADERNAME=Remote-Name ./homechart_linux_amd64 -c config.json serve "}]